generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  CREATOR
  ADMIN
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  password   String
  avatar     String?
  phone      String?
  location   String?
  website    String?
  bio        String?
  occupation String?
  education  String?
  joinDate   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isActive   Boolean  @default(true)
  role       Role     @default(STUDENT)

  coursesEnrolled    Int @default(0)
  certificatesEarned Int @default(0)
  learningHours      Int @default(0)

  reviews       Review[]
  notifications Notification[]
  wishlist      Wishlist[]
  roadmaps      Roadmap[]      @relation("CreatedRoadmaps")
  comments      Comment[]
}

model Course {
  id           String              @id @default(cuid())
  title        String
  instructor   String
  image        String?
  rating       Float               @default(0)
  students     Int                 @default(0)
  price        Float
  category     String
  level        String
  duration     String
  lastUpdated  DateTime
  description  String
  requirements String[]
  learnings    String[]
  curriculum   CurriculumSection[]
  reviews      Review[]
  certificates Certificate[]
}

model CurriculumSection {
  id       String   @id @default(cuid())
  title    String
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])
  lessons  Lesson[]
}

model Lesson {
  id        String            @id @default(cuid())
  title     String
  duration  String
  type      String
  sectionId String
  section   CurriculumSection @relation(fields: [sectionId], references: [id])
}

model Certificate {
  id          String   @id @default(cuid())
  title       String
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  instructor  String
  issueDate   DateTime
  image       String
  downloadUrl String
}

model Event {
  id          String          @id @default(cuid())
  title       String
  type        String
  category    String
  date        DateTime
  time        String
  location    String
  image       String
  rating      Float
  attendees   Int
  organizer   String
  description String
  schedule    EventSchedule[]
  reviews     Review[]
}

model EventSchedule {
  id      String         @id @default(cuid())
  day     String
  eventId String
  event   Event          @relation(fields: [eventId], references: [id])
  items   ScheduleItem[]
}

model ScheduleItem {
  id          String        @id @default(cuid())
  time        String
  title       String
  speaker     String
  description String
  scheduleId  String
  schedule    EventSchedule @relation(fields: [scheduleId], references: [id])
}

model Podcast {
  id          String           @id @default(cuid())
  title       String
  host        String
  image       String
  rating      Float
  listeners   Int
  duration    String
  category    String
  description String
  episodes    PodcastEpisode[]
  reviews     Review[]
}

model PodcastEpisode {
  id          String   @id @default(cuid())
  title       String
  duration    String
  date        DateTime
  description String
  podcastId   String
  podcast     Podcast  @relation(fields: [podcastId], references: [id])
}

model YouTubeChannel {
  id          String @id @default(cuid())
  title       String
  creator     String
  image       String
  subscribers String
  category    String
  videos      Int
}

model Roadmap {
  id          String        @id @default(cuid())
  title       String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creatorId   String
  creator     User          @relation("CreatedRoadmaps", fields: [creatorId], references: [id])
  nodes       RoadmapNode[]
  progress    Int
}

model RoadmapNode {
  id          String  @id @default(cuid())
  title       String
  description String
  type        String
  status      String
  link        String
  metadata    Json
  roadmapId   String
  roadmap     Roadmap @relation(fields: [roadmapId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String
  date      DateTime
  courseId  String?
  eventId   String?
  podcastId String?
  videoId   String?
  Course    Course?  @relation(fields: [courseId], references: [id])
  Event     Event?   @relation(fields: [eventId], references: [id])
  Podcast   Podcast? @relation(fields: [podcastId], references: [id])
  Video     Video?   @relation(fields: [videoId], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  read        Boolean  @default(false)
  time        DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Wishlist {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  title    String
  itemType String
  itemId   String
}

model Video {
  id            String    @id @default(cuid())
  title         String
  creator       String
  channelName   String
  channelImage  String
  thumbnail     String
  rating        Float
  views         Int
  duration      String
  uploadDate    DateTime
  category      String
  description   String
  tags          String[]
  comments      Comment[]
  relatedVideos Json
  reviews       Review[]
}

model Comment {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  videoId String
  video   Video    @relation(fields: [videoId], references: [id])
  comment String
  date    DateTime
  likes   Int
}
